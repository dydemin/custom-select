{"version":3,"sources":["Helpers.js","CustomSelect.js","custom-select.js"],"names":[],"mappingsxfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"custom-select.js","sourcesContent":["/*!\n * Helpers.js (https://github.com/dydemin/custom-select/src/js/Helpers.js)\n * custom-select v0.0.1 (https://github.com/dydemin/custom-select)\n * Copyright 2017 dydemin <dydemin@gmail.com>\n * Licensed under MIT (https://github.com/dydemin/custom-select/blob/master/LICENSE)\n */\n\n/**\n * Модуль устанавливает в объект Helpers вспомогательные методы для манипуляции\n * с объектами.\n *\n * @class Helpers Класс со вспомогательными методами.\n * @method void addClass(Element, string) Добавить класс к элементу.\n * @method Element createElement(string) Создать элемент с указанным тэгом.\n * @method object extend(object[]) Объединить объекты.\n * @method Node[] getChildren(Node) Получить дочерние элементы указанного.\n * @method void hasClass(Element, string) Проверить наличие класса у элемента.\n * @method void hide(HTMLElement) Скрыть элемент.\n * @method void insertAfter(Node, Node) Вставить элемент после другого элемента.\n * @method void insertInto(Node, Node) Вставить элемент внутрь другого элемента.\n * @method NodeList queryElements(string) Получить элементы по селектору.\n * @method void removeClass(Element, string) Удалить класс у элемента.\n * @method void show(HTMLElement) Отобразить элемент.\n * @method void toggleClass(Element, string) Переключить класс у элемента.\n * @method void wrap(Node, Node) Обернуть элемент в контейнер.\n */\n;(function(exports, document) {\n  'use strict';\n\n  /**\n   * Объединить объекты в один. Замена метода extend() из jQuery.\n   *\n   * Члены объектов, переданных позже, заменяют члены объектов с такими же\n   * именами, переданных раньше.\n   *\n   * @param object[] Список объектов для объединения.\n   * @return object Объединённый объект.\n   */\n  exports.extend = function(out) {\n    out = out || {};\n    for (var i = 1; i < arguments.length; i++) {\n      var obj = arguments[i];\n      if (!obj)\n        continue;\n      for (var key in obj) {\n        if (obj.hasOwnProperty(key)) {\n          if (typeof obj[key] === 'object')\n            out[key] = exports.extend(out[key], obj[key]);\n          else\n            out[key] = obj[key];\n        }\n      }\n    }\n    return out;\n  };\n\n  /**\n   * Обернуть элемент в другой элемент.\n   *\n   * @param Node element Элемент, который необходимо обернуть.\n   * @param Node wrapper Элемент, в который оборачивается искомый\n   * элемент.\n   */\n  exports.wrap = function(element, wrapper) {\n    element.parentNode.insertBefore(wrapper, element);\n    wrapper.appendChild(element);\n  };\n\n  /**\n   * Вставить новый элемент после указанного.\n   *\n   * @param Node newElement Вставляемый элемент.\n   * @param Node element Элемент, после которого выполняется вставка.\n   */\n  exports.insertAfter = function(newElement, element) {\n    element.parentNode.insertBefore(newElement, element.nextSibling);\n  };\n\n  /**\n   * Вставить элемент после последнего дочернего элемента контейнера.\n   *\n   * @param Node container Конейнер, в который вставляется элемент.\n   * @param Node element Вставляемый элемент.\n   */\n  exports.insertInto = function(container, element) {\n    container.appendChild(element);\n  };\n\n  /**\n   * Получить массив дочерних элементов указанного.\n   *\n   * @param ParentNode element Элемент, дочерние элементы которого необходимо\n   * получить.\n   * @return Node[] Массив дочерних элементов указанного элемента.\n   */\n  exports.getChildren = function(element) {\n    var children = element.children;\n    var result = [];\n    for (var childIndex in children) {\n      var child = children.item(childIndex);\n      if (null !== child) {\n        result.push(child);\n      }\n    }\n\n    return result;\n  };\n\n  /**\n   * Создать новый элемент.\n   *\n   * @param string tag Название тэга нового элемента.\n   * @return Element Созданный элемент.\n   */\n  exports.createElement = function(tag) {\n    return document.createElement(tag);\n  };\n\n  /**\n   * Найти все элементы по указанному селектору.\n   *\n   * @param string selector Селектор для поиска элементов.\n   * @return NodeList\n   */\n  exports.queryElements = function(selector) {\n    return document.querySelectorAll(selector);\n  };\n\n  /**\n   * Добавить класс указанному элементу.\n   *\n   * @param Element element Элемент, которому необходимо добавить класс.\n   * @param string className Название класса, добавляемое элементу.\n   */\n  exports.addClass = function(element, className) {\n    element.classList.add(className);\n  };\n\n  /**\n   * Удалить класс у указанного элемента.\n   *\n   * @param Element element Элемент, у которого необходимо удалить класс.\n   * @param string className Название класса, удаляемое у элемента.\n   */\n  exports.removeClass = function(element, className) {\n    element.classList.remove(className);\n  };\n\n  /**\n   * ПроверитЬ установлен ли у указанного элемента класс с указанным именем.\n   *\n   * @param Element element Элемент, у которого проверяется наличие класса.\n   * @param string className Название проверяемого класса.\n   * @return boolean Если класс установлен для указанного элемента, то\n   * возвращается true, иначе - false.\n   */\n  exports.hasClass = function(element, className) {\n    return element.classList.contains(className);\n  };\n\n  /**\n   * Переключить класс с указанным названием у указанного элемента.\n   *\n   * Если у элемента установлен указанный класс, то он будет удалён; если класс\n   * установлен не был - то он добавляется.\n   *\n   * @param Element element Элемент, у которого переключается класс.\n   * @param string className Название переключаемого класса.\n   */\n  exports.toggleClass = function(element, className) {\n    if (exports.hasClass(element, className)) {\n      exports.removeClass(element, className);\n    } else {\n      exports.addClass(element, className);\n    }\n  };\n\n  /**\n   * Скрыть указанный элемент.\n   *\n   * @param HTMLElement element Скрываемый класс.\n   */\n  exports.hide = function(element) {\n    element.style.display = 'none';\n  };\n\n  /**\n   * Отобразить указанный элемент. По умолчанию элемент отображается как\n   * блочный.\n   *\n   * @param HTMLElement element Отображаемый элемент.\n   * @param string value Значение свойства display для отображаемого элемента.\n   */\n  exports.show = function(element, value) {\n    value = value !== undefined ? value : 'block';\n\n    element.style.display = value;\n  };\n\n})(Helpers={}, document);\n","/*!\n * CustomSelect.js (https://github.com/dydemin/custom-select/src/js/CustomSelect.js)\n * custom-select v0.0.1 (https://github.com/dydemin/custom-select)\n * Copyright 2017 dydemin <dydemin@gmail.com>\n * Licensed under MIT (https://github.com/dydemin/custom-select/blob/master/LICENSE)\n */\n\n/**\n * Модуль экспоритует в глобальный объект CustomSelect метод create() для\n * инициализации плагина на определённом элементе выпадающего списка.\n *\n * @class CustomSelect\n * @method CustomSelect create(HTMLSelectElement, Object) Инициализация плагина\n */\n;(function(exports, document) {\n  'use strict';\n\n  // Тэги, используемые для структуры, формируемой плагином\n  var OPTION_TAG       = 'li';\n  var OPTIONS_LIST_TAG = 'ul';\n  var SELECT_BOX_TAG   = 'div';\n  var WRAPPER_TAG      = 'div';\n\n  // Названия атрибутов, используемых в модуле\n  var VALUE_ATTRIBUTE = 'value';\n\n  // Типы названий классов, использованный в формируемой структуре\n  var ClassTypes = {\n    active:  'active',\n    base:    'base',\n    control: 'control',\n    option:  'option',\n    options: 'options',\n    select:  'select'\n  };\n\n  // Названия классов по умолчанию, используемые в формируемой структурe\n  var DEFAULT_CLASSES = {\n    active:  'cs__select_active',\n    base:    'cs',\n    control: 'cs__control',\n    option:  'cs__option',\n    options: 'cs__options',\n    select:  'cs__select'\n  };\n\n  /**\n   * Основной класс плагина, включающий в себя основную логику.\n   *\n   * @class CustomSelect\n   * @method CustomSelect open()  Раскрыть выпадающий список.\n   * @method CustomSelect close() Свернуть выпадающий список.\n   * @method CustomSelect toggle() Изменить состояние списка.\n   * @method CustomSelect select(string, string) Выбрать элемент списка с\n   * указанным значением атрибута value и указанным текстом.\n   *\n   * @params HTMLSelectElement element Элемент контрола выпадающего списка\n   * @params Object options Объект настроек плагина.\n   */\n  function CustomSelect(element, options) {\n    options = options !== undefined ? options : {};\n\n    // Инициализация членов класса\n    this._control = element;\n    this._options = this._setOptions(options);\n    this._wrapper = this._createWrapper();\n    this._selectBox = this._createSelectBox();\n    this._optionsList = this._createOptionsList();\n    this._items = this._initializeItems(this._control);\n    this._selected = null;\n    this._opened = false;\n\n    // Размерешние элементов в DOM и назначение обработчиков событий\n    this._initializeElements()\n        ._initializeEvents();\n  }\n\n  /**\n   * --------------------------------------------------------------------------\n   * Доступные методы класса\n   * --------------------------------------------------------------------------\n   */\n\n  /**\n   * Раскрыть выпадающий список.\n   *\n   * @return this\n   */\n  CustomSelect.prototype.open = function() {\n    if (!this._opened) {\n      Helpers.addClass(this._selectBox, DEFAULT_CLASSES[ClassTypes.active]);\n      this._addCustomClasses(this._selectBox, ClassTypes.active);\n\n      Helpers.show(this._optionsList);\n\n      this._opened = true;\n    }\n\n    return this;\n  };\n\n  /**\n   * Свернуть выпадающий список.\n   *\n   * @return this\n   */\n  CustomSelect.prototype.close = function() {\n    if (this._opened) {\n      Helpers.removeClass(this._selectBox, DEFAULT_CLASSES[ClassTypes.active]);\n      this._removeCustomClasses(this._selectBox, ClassTypes.active);\n\n      Helpers.hide(this._optionsList);\n\n      this._opened = false;\n    }\n\n    return this;\n  };\n\n  /**\n   * Переключить состояние выпадающего списка (окрыт/закрыт).\n   *\n   * @return this\n   */\n  CustomSelect.prototype.toggle = function() {\n    if (this._opened) {\n      this.close();\n    } else {\n      this.open();\n    }\n\n    return this;\n  };\n\n  /**\n   * Установить выбранной элемент выпадающего списка с указанным значением\n   * атрибута value и надписью.\n   *\n   * @return this\n   */\n  CustomSelect.prototype.select = function(value, title) {\n    var item = this._items.find(function(item) {\n      return item.title === title && item.value === value;\n    });\n\n    if (undefined !== item && (null === this._selected\n        || (this._selected && this._selected.value !== value\n        && this._selected.title !== title)))\n    {\n      this._selected = {\n        value: value,\n        title: title\n      };\n\n      item.original.selected = true;\n\n      this._selectBox.innerText = title;\n    }\n\n    return this;\n  };\n\n  /**\n   * --------------------------------------------------------------------------\n   * Закрытые методы класса\n   * --------------------------------------------------------------------------\n   */\n\n   /**\n   * Добавить к указанному элементу пользовательский класс, заданный в\n   * настройках при инициализации плагина.\n   *\n   * @param Element element Элемент, которому необходимо задать класс.\n   * @param string type Тип класса (базовый, для контрола, для списка и т.п.).\n   * @return this\n   */\n  CustomSelect.prototype._addCustomClasses = function(element, type) {\n    type = type !== undefined ? type : ClassTypes.base;\n\n    var customClasses = this._getCustomClassNames(type);\n    if (null !== customClasses) {\n      customClasses.forEach(function(customClass) {\n        Helpers.addClass(element, customClass);\n      });\n    }\n\n    return this;\n  };\n\n   /**\n   * Закрыть другие выпадающие списки.\n   *\n   * @return this\n   */\n  CustomSelect.prototype._closeOthers = function() {\n    // Найти и убрать класс активного для других блоков выпадающего списка\n    var activeSelectBoxSelector = '.' + DEFAULT_CLASSES.base\n      + ' .' + DEFAULT_CLASSES.select\n      + '.' + DEFAULT_CLASSES.active;\n\n    Helpers.queryElements(activeSelectBoxSelector).forEach(function(element) {\n      if (this._selectBox !== element) {\n        Helpers.removeClass(element, DEFAULT_CLASSES[ClassTypes.active]);\n        this._removeCustomClasses(element, ClassTypes.active);\n      }\n    }, this);\n\n    // Найти и скрыть другие списки элементов выбора\n    var optionsListSelector = '.' + DEFAULT_CLASSES.base\n      + ' .' + DEFAULT_CLASSES.options;\n\n    Helpers.queryElements(optionsListSelector).forEach(function(element) {\n      if (this._optionsList !== element) {\n        Helpers.hide(element);\n      }\n    }, this);\n\n    return this;\n  };\n\n  /**\n   * Создать пустой списбок элементов выбора.\n   *\n   * @return Element\n   */\n  CustomSelect.prototype._createOptionsList = function() {\n    var optionsList = Helpers.createElement(OPTIONS_LIST_TAG);\n    Helpers.addClass(optionsList, DEFAULT_CLASSES[ClassTypes.options]);\n    this._addCustomClasses(optionsList, ClassTypes.options);\n\n    return optionsList;\n  };\n\n  /**\n   * Создать элемент блока поля выпадающего списка.\n   *\n   * @return Element\n   */\n  CustomSelect.prototype._createSelectBox = function() {\n    var selectBox = Helpers.createElement(SELECT_BOX_TAG);\n    Helpers.addClass(selectBox, DEFAULT_CLASSES[ClassTypes.select]);\n    this._addCustomClasses(selectBox, ClassTypes.select);\n\n    return selectBox;\n  };\n\n  /**\n   * Создать элемент контейнера разметки плагина.\n   *\n   * @return Element\n   */\n  CustomSelect.prototype._createWrapper = function() {\n    var wrapper = Helpers.createElement(WRAPPER_TAG);\n    Helpers.addClass(wrapper, DEFAULT_CLASSES[ClassTypes.base]);\n    this._addCustomClasses(wrapper);\n\n    return wrapper;\n  };\n\n  /**\n   * Получить список пользовательских классов заданного типа.\n   *\n   * @param string type Тип классов элементов.\n   * @return null|string[] Возвращает массив названий классов или null, если\n   * ни одно название класса данного типа не задано пользователем.\n   */\n  CustomSelect.prototype._getCustomClassNames = function(type) {\n    type = type !== undefined ? type : ClassTypes.base;\n\n    if (this._options.customClasses.hasOwnProperty(type)) {\n      if ('string' === typeof this._options.customClasses[type]) {\n        return this._options.customClasses[type].split(' ');\n      }\n\n      if (this._options.customClasses[type] instanceof Array) {\n        return this._options.customClases[type];\n      }\n    }\n    return null;\n  };\n\n  /**\n   * Создание необходимой для плагина структуры DOM.\n   *\n   * @return this\n   */\n  CustomSelect.prototype._initializeElements = function() {\n    // Скрыть и установить необходимые классы для контрола выпадающего списка\n    Helpers.hide(this._control);\n    Helpers.addClass(this._control, DEFAULT_CLASSES[ClassTypes.control]);\n    this._addCustomClasses(this._control, ClassTypes.control);\n\n    // Добавить контейнер для плагина\n    Helpers.wrap(this._control, this._wrapper);\n\n    // Добавить блок поля выпадающего списка\n    Helpers.insertAfter(this._selectBox, this._control);\n    this._setPlaceholder();\n\n    // Добавить список элементов выбора\n    Helpers.insertAfter(this._optionsList, this._selectBox);\n\n    // Вставить элементы выбора в список\n    this._items.forEach(function(item) {\n      Helpers.insertInto(this._optionsList, item.visible);\n    }, this);\n\n    return this;\n  };\n\n   /**\n    * Установка обработчиков событий элементов разметки плагина.\n    *\n    * @return this\n    */\n  CustomSelect.prototype._initializeEvents = function() {\n    return this._setSelectBoxClickHandler()\n        ._setOptionsListClickHandler()\n        ._setDocumentClickHandler();\n  };\n\n  /**\n   * Получить массив элементов выбора из дочерних элементов контрола.\n   *\n   * @param HTMLSelectElement selectControl Элемент контрола выпадаюещго списка\n   * @return {string value, string title, HTMLOptionElement original,\n   * Element visible}[]\n   */\n  CustomSelect.prototype._initializeItems = function(selectControl) {\n    var items = [];\n\n    Helpers.getChildren(selectControl).forEach(function(option) {\n      var value = option.getAttribute('value');\n      var title = option.innerText;\n\n      if (value) {\n        var visibleItem = Helpers.createElement(OPTION_TAG);\n        Helpers.addClass(visibleItem, DEFAULT_CLASSES[ClassTypes.option]);\n        this._addCustomClasses(visibleItem, ClassTypes.option);\n        visibleItem.innerText = title;\n        visibleItem.dataset.target = value;\n\n        items.push({\n          value: value,\n          title: title,\n          original: option,\n          visible: visibleItem\n        });\n      }\n    }, this);\n\n    return items;\n  };\n\n  /**\n   * Убрать у элемента пользовательский класс, заданный в настройка при\n   * инициализации плагина.\n   *\n   * @param Element element Элемент, у которого убиратеся класс.\n   * @param string type Тип класса\n   * @return this\n   */\n  CustomSelect.prototype._removeCustomClasses = function(element, type) {\n    type = type !== undefined ? type : ClassTypes.base;\n\n    var customClasses = this._getCustomClassNames(type);\n    if (null !== customClasses) {\n      customClasses.forEach(function(customClass) {\n        Helpers.removeClass(element, customClass);\n      });\n    }\n\n    return this;\n  };\n\n  /**\n   * Установить обработчик события щелчка мышки для всего документа (выпадающий\n   * список закрывается при щелчке вне его).\n   *\n   * @return this\n   */\n  CustomSelect.prototype._setDocumentClickHandler = function() {\n    var obj = this;\n\n    document.addEventListener('click', function() {\n      obj.close();\n    });\n\n    return this;\n  };\n\n  /**\n   * Сформировать объект настроек плагина на основе настроек по умолчанию и\n   * пользовательских настроек.\n   *\n   * @return Object\n   */\n  CustomSelect.prototype._setOptions = function(options) {\n    return Helpers.extend({}, this._options, options);\n  };\n\n  /**\n   * Установить обработчик щелчка мышкой по списку элементов выбора (при этом\n   * вычисляется по которому из элементов был произведён щелчок и он\n   * устанавливается как выбранный для контрола выпадающего списка, меняется\n   * надпись в поле выпадающего списка и список закрывается).\n   *\n   * @return this\n   */\n  CustomSelect.prototype._setOptionsListClickHandler = function() {\n    var obj = this;\n\n    this._optionsList.addEventListener('click', function(ev) {\n      ev.stopPropagation();\n\n      var clickedItem = ev.target;\n      obj.select(clickedItem.dataset.target, clickedItem.innerText)\n         .close();\n    });\n\n    return this;\n  };\n\n  /**\n   * Задать подписть для блока выпаюащего списка когда ни один из элементов\n   * не выбран. Подпись устанавливается либо на основе настройки placeholder\n   * плагина, либо для неё выбирается элемент из опций выбора, для которого не\n   * задано значение атрибута value (или задано пустое значение).\n   *\n   * @return this\n   */\n  CustomSelect.prototype._setPlaceholder = function() {\n    if (this._options.placeholder) {\n      if ('string' === typeof this._options.placeholder) {\n        this._selectBox.innerText = this._options.placeholder;\n      } else {\n        var placeholderItem = Helpers.getChildren(this._control).find(\n          function(child) {\n            return !child.getAttribute('value');\n          }\n        );\n\n        if (null !== placeholderItem) {\n          this._selectBox.innerText = placeholderItem.innerText || '';\n        }\n      }\n    }\n\n    return this;\n  };\n\n  /**\n   * Установить обрабочки щелчка мышкой для поля выпадающего списка (при щелчке\n   * по полю выпадающего списка, соответсвующий список меняет состоятие:\n   * раскрывается или закрывается, все остальные списки закрываются).\n   *\n   * @return this\n   */\n  CustomSelect.prototype._setSelectBoxClickHandler = function() {\n    var obj = this;\n\n    this._selectBox.addEventListener('click', function(ev) {\n      ev.stopPropagation();\n\n      obj._closeOthers()\n         .toggle();\n    });\n\n    return this;\n  };\n\n  /**\n   * --------------------------------------------------------------------------\n   * Закрытые поля класса\n   * --------------------------------------------------------------------------\n   */\n\n  /**\n   * Настройки плагина по умолчанию\n   */\n  CustomSelect.prototype._options = {\n    placeholder: true,  // показывать ли плейсхолдер\n    customClasses: {}   // пользовательские классы для элементов разметки\n  };\n\n  /**\n   * --------------------------------------------------------------------------\n   * Экспорт в глобальную область видимости\n   * --------------------------------------------------------------------------\n   */\n\n  /**\n   * Инициализация плагина.\n   *\n   * @param HTMLSelectElement element Элемент, на котором происходит\n   * инициализация плагина.\n   * @param Object options Объект настроек плагина.\n   * @return CustomSelect\n   */\n  exports.create = function(element, options) {\n    options = options !== undefined ? options : {};\n\n    return new CustomSelect(element, options);\n  };\n\n})(CustomSelect={}, document);\n","/*!\n * custom-select.js (https://github.com/dydemin/custom-select/src/js/custom-select.js)\n * custom-select v0.0.1 (https://github.com/dydemin/custom-select)\n * Copyright 2017 dydemin <dydemin@gmail.com>\n * Licensed under MIT (https://github.com/dydemin/custom-select/blob/master/LICENSE)\n */\n\n/**\n * Модуль инициалзирует планиг для элементов select с классом custom-select\n * и экспортирует в глобальный объект CustomSelect список инициализированных\n * объектов для возможности последующего доступа.\n *\n * @class CustomSelect\n * @property CustomSelect[] initialized Список инициализированных объектов\n */\n;(function(exports) {\n\n  var initialized = [];\n\n  for (var i = 0, elements = Helpers.queryElements('select.custom-select');\n      i < elements.length; i++)\n  {\n    initialized.push(CustomSelect.create(elements[i]));\n  }\n\n  exports.initialized = initialized;\n\n})(CustomSelect);\n"]}